package edu.kh.project.member.model.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import edu.kh.project.member.model.dto.Member;
import edu.kh.project.member.model.mapper.MemberMapper;
import lombok.extern.slf4j.Slf4j;


/*
 * 해시(hash) 알고리즘 사용하여 암호화 진행
 * -> 데이터를 고정된 길이의 해시값(고유한 문자열) 으로 변환하는 알고리즘
 * 
 * */

@Transactional
@Service
@Slf4j
public class MemberServiceImpl implements MemberService{
	
	// 등록된 Bean 중에서 같은 타입 or 상속관계인 bean
	@Autowired // 의존성 주입(DI)
	private MemberMapper mapper;
	
	// Bcrypt 암호화 객체 의존성 주입(SecurityConfig 참고)
	@Autowired
	private BCryptPasswordEncoder bcrypt;

	// 로그인 서비스
	@Override
	public Member login(Member inputMember) {
		
		// 암호화 진행
		
		// bcrypt.encode(문자열) : 문자열을 암호화하여 반환
		String bcryptPassword = bcrypt.encode(inputMember.getMemberPw());
		// log.debug("bcryptPassword" + bcryptPassword);
		
		// bcrypt.matches(평문, 암호화된문장)
		boolean result = bcrypt.matches(inputMember.getMemberPw(), bcryptPassword);
		
		log.debug("result : " + resulr);
		
		return null;
	}
}
